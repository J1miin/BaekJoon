#include <algorithm>
#include <vector>
using namespace std;
/*greedy 문제임을 알았어야 했다.
파악한 것 : 다음날의 가격이 전날의 가격보다 커야 한다.
막힌 부분 : 최대합이 되는 과정을 어떻게 찾아야하지? 모든 경우를 다 찾으려면 다 기록하면서 방문 여부도 체크해야할 것 같은데.. 
-> 사용하는 자료구조가 너무 많아지는데 .... ㅠㅠㅠ 
해결책 : greedy -> 전체 문제의 최적해가 ‘부분 문제의 최적해로 구성’될 수 있는 경우인지 확인해야한다.
>> greedy가 가능한지 점검이 필요하다
*/
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int answer = 0;
        int iMax = 0;
        for (int i=0;i<prices.size();++i){
            if(i+1<prices.size()){
                if(prices[i]<prices[i+1]){
                    answer += prices[i+1]-prices[i];
                }
            }
        }
        return answer;
    }
};